{"version":3,"sources":["Header.js","ToDo.js","ToDoList.js","ToDoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","ToDo","todo","handleToggle","id","name","value","onClick","e","preventDefault","currentTarget","complete","task","ToDoList","toDoList","handleFilter","map","type","style","margin","to","ToDoForm","addTask","useState","userInput","setUserInput","onSubmit","onChange","placeholder","App","data","setToDoList","basename","process","path","copy","length","mapped","Number","filtered","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2xCAYeA,EARA,WACX,OACI,wBAAQC,UAAW,SAAnB,SACI,2DCWGC,G,MAdF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAOjB,OACI,qBAAKC,GAAIF,EAAKE,GAA8BC,KAAK,OAAOC,MAAOJ,EAAKE,GAAIG,QANxD,SAACC,GACjBA,EAAEC,iBACFN,EAAaK,EAAEE,cAAcN,KAIiEJ,UAAS,eAAUE,EAAKS,SAAW,SAAW,IAA5I,SACKT,EAAKU,MADaV,EAAKE,GAAKF,EAAKU,Q,QCS/BC,EAfE,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAAUX,EAAgC,EAAhCA,aAAcY,EAAkB,EAAlBA,aACvC,OACI,sBAAKf,UAAW,OAAhB,UACKc,EAASE,KAAI,SAAAd,GACV,OACI,cAAC,EAAD,CAAMA,KAAMA,EAAMC,aAAcA,EAAcY,aAAcA,OAGpE,cAAC,IAAD,CAAQE,KAAM,SAAUC,MAAO,CAACC,OAAQ,QAASZ,QAASQ,EAA1D,6BACA,cAAC,IAAD,CAAQE,KAAM,UAAWC,MAAO,CAACC,OAAQ,QAASZ,QAASQ,EAA3D,6BACA,eAAC,IAAD,CAAMK,GAAE,gBAAW,GAAnB,cAAkC,cAAC,IAAD,CAAQH,KAAM,UAAWC,MAAO,CAACC,OAAQ,QAAzC,0BAAlC,MAA6B,OCO1BE,EArBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEhB,EAAoCC,mBAAS,IAA7C,mBAAQC,EAAR,KAAmBC,EAAnB,KAWA,OACI,uBAAMC,SANW,SAAClB,GAClBA,EAAEC,iBACFa,EAAQE,GACRC,EAAa,KAGb,UACI,uBAAOnB,MAAOkB,EAAWP,KAAK,OAAOU,SAXxB,SAACnB,GAClBiB,EAAajB,EAAEE,cAAcJ,QAUoCsB,YAAY,kBACzE,gDCyCGC,MAjDf,WACE,MAAgCN,mBAASO,GAAzC,mBAAOhB,EAAP,KAAiBiB,EAAjB,KA2BA,OACE,qBAAK/B,UAAU,MAAf,SACE,eAAC,IAAD,CAAQgC,SAAUC,wBAAlB,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,gBAAZ,SACE,cAAC,EAAD,CAAUZ,QAfJ,SAACE,GACf,IAAIW,EAAI,YAAOrB,GACfqB,EAAI,sBACCA,GADD,CAEF,CAAE/B,GAAIU,EAASsB,OAAS,EAAGxB,KAAMY,EAAWb,UAAU,KAExDoB,EAAYI,QAWN,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACE,cAAC,EAAD,CACEpB,SAAUA,EACVX,aApCS,SAACC,GACpB,IAAIiC,EAASvB,EAASE,KAAI,SAACJ,GACzB,OAAOA,EAAKR,KAAOkC,OAAOlC,GAAnB,2BACEQ,GADF,IACQD,UAAWC,EAAKD,WADxB,eAEEC,MAEXmB,EAAYM,IA+BFtB,aA5BS,WACnB,IAAIwB,EAAWzB,EAAS0B,QAAO,SAAC5B,GAC9B,OAAQA,EAAKD,YAEfoB,EAAYQ,iBCdDE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6e08d91.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './scss/home.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={'header'}>\r\n            <h1>To Do List Application</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './scss/todo-list.css' \r\n\r\nconst ToDo = ({todo, handleToggle}) => {\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault()\r\n        handleToggle(e.currentTarget.id)\r\n    }\r\n\r\n    return (\r\n        <div id={todo.id} key={todo.id + todo.task} name=\"todo\" value={todo.id} onClick={handleClick} className={`todo ${todo.complete ? 'strike' : ''}`}>\r\n            {todo.task}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nconst ToDoList = ({toDoList, handleToggle, handleFilter}) => {\r\n    return (\r\n        <div className={'list'}>\r\n            {toDoList.map(todo => {\r\n                return (\r\n                    <ToDo todo={todo} handleToggle={handleToggle} handleFilter={handleFilter}/>\r\n                )\r\n            })}\r\n            <Button type={\"danger\"} style={{margin: '20px'}} onClick={handleFilter}>Clear Completed</Button>\r\n            <Button type={\"default\"} style={{margin: '20px'}} onClick={handleFilter}>Clear Completed</Button>\r\n            <Link to={`/task/${1}`} key={1} > <Button type={\"primary\"} style={{margin: '20px'}}>Add New Task</Button> </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoList;","import React, { useState } from 'react';\r\n\r\nconst ToDoForm = ({ addTask }) => {\r\n\r\n    const [ userInput, setUserInput ] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setUserInput(e.currentTarget.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addTask(userInput);\r\n        setUserInput(\"\");\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input value={userInput} type=\"text\" onChange={handleChange} placeholder=\"Enter task...\"/>\r\n            <button>Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ToDoForm;","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//mock data\nimport data from \"./data.json\";\n//components\nimport Header from \"./Header\";\nimport ToDoList from \"./ToDoList\";\nimport ToDoForm from \"./ToDoForm\";\n\nfunction App() {\n  const [toDoList, setToDoList] = useState(data);\n\n  const handleToggle = (id) => {\n    let mapped = toDoList.map((task) => {\n      return task.id === Number(id)\n        ? { ...task, complete: !task.complete }\n        : { ...task };\n    });\n    setToDoList(mapped);\n  };\n\n  const handleFilter = () => {\n    let filtered = toDoList.filter((task) => {\n      return !task.complete;\n    });\n    setToDoList(filtered);\n  };\n\n  const addTask = (userInput) => {\n    let copy = [...toDoList];\n    copy = [\n      ...copy,\n      { id: toDoList.length + 1, task: userInput, complete: false },\n    ];\n    setToDoList(copy);\n  };\n\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Header />\n        <Switch>\n          <Route path=\"/task/:handle\">\n            <ToDoForm addTask={addTask} />\n          </Route>\n          <Route path=\"/\">\n            <ToDoList\n              toDoList={toDoList}\n              handleToggle={handleToggle}\n              handleFilter={handleFilter}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}