{"version":3,"sources":["Header.js","ToDo.js","ToDoList.js","ToDoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Header","ToDo","todo","handleToggle","id","name","value","onClick","e","preventDefault","currentTarget","className","complete","task","ToDoList","toDoList","handleFilter","map","style","margin","ToDoForm","addTask","useState","userInput","setUserInput","onSubmit","type","onChange","placeholder","App","data","setToDoList","mapped","Number","filtered","filter","copy","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAUeA,EARA,WACX,OACI,iCACI,2DCWGC,EAdF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAOjB,OACI,qBAAKC,GAAIF,EAAKE,GAA8BC,KAAK,OAAOC,MAAOJ,EAAKE,GAAIG,QANxD,SAACC,GACjBA,EAAEC,iBACFN,EAAaK,EAAEE,cAAcN,KAIiEO,UAAWT,EAAKU,SAAW,cAAgB,OAAzI,SACKV,EAAKW,MADaX,EAAKE,GAAKF,EAAKW,OCM/BC,EAbE,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAAUZ,EAAgC,EAAhCA,aAAca,EAAkB,EAAlBA,aACvC,OACI,gCACKD,EAASE,KAAI,SAAAf,GACV,OACI,cAAC,EAAD,CAAMA,KAAMA,EAAMC,aAAcA,EAAca,aAAcA,OAGpE,wBAAQE,MAAO,CAACC,OAAQ,QAASZ,QAASS,EAA1C,iCCYGI,EArBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEhB,EAAoCC,mBAAS,IAA7C,mBAAQC,EAAR,KAAmBC,EAAnB,KAWA,OACI,uBAAMC,SANW,SAACjB,GAClBA,EAAEC,iBACFY,EAAQE,GACRC,EAAa,KAGb,UACI,uBAAOlB,MAAOiB,EAAWG,KAAK,OAAOC,SAXxB,SAACnB,GAClBgB,EAAahB,EAAEE,cAAcJ,QAUoCsB,YAAY,kBACzE,gDCuBGC,MAjCf,WAEE,MAAkCP,mBAASQ,GAA3C,mBAAQf,EAAR,KAAkBgB,EAAlB,KAsBA,OACE,sBAAKpB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUI,SAAUA,EAAUZ,aAvBb,SAACC,GACpB,IAAI4B,EAASjB,EAASE,KAAI,SAAAJ,GACxB,OAAOA,EAAKT,KAAO6B,OAAO7B,GAAnB,2BAA8BS,GAA9B,IAAoCD,UAAWC,EAAKD,WAApD,eAAsEC,MAE/EkB,EAAYC,IAmBgDhB,aAhBzC,WACnB,IAAIkB,EAAWnB,EAASoB,QAAO,SAAAtB,GAC7B,OAAQA,EAAKD,YAEfmB,EAAYG,MAaV,cAAC,EAAD,CAAUb,QAVE,SAACE,GACf,IAAIa,EAAI,YAAOrB,GACfqB,EAAI,sBAAOA,GAAP,CAAa,CAAEhC,GAAIW,EAASsB,OAAS,EAAGxB,KAAMU,EAAWX,UAAU,KACvEmB,EAAYK,UCjBDE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.cc1f9286.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>To Do List Application</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst ToDo = ({todo, handleToggle}) => {\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault()\r\n        handleToggle(e.currentTarget.id)\r\n    }\r\n\r\n    return (\r\n        <div id={todo.id} key={todo.id + todo.task} name=\"todo\" value={todo.id} onClick={handleClick} className={todo.complete ? \"todo strike\" : \"todo\"}>\r\n            {todo.task}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo';\r\n\r\nconst ToDoList = ({toDoList, handleToggle, handleFilter}) => {\r\n    return (\r\n        <div>\r\n            {toDoList.map(todo => {\r\n                return (\r\n                    <ToDo todo={todo} handleToggle={handleToggle} handleFilter={handleFilter}/>\r\n                )\r\n            })}\r\n            <button style={{margin: '20px'}} onClick={handleFilter}>Clear Completed</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoList;","import React, { useState } from 'react';\r\n\r\nconst ToDoForm = ({ addTask }) => {\r\n\r\n    const [ userInput, setUserInput ] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setUserInput(e.currentTarget.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addTask(userInput);\r\n        setUserInput(\"\");\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input value={userInput} type=\"text\" onChange={handleChange} placeholder=\"Enter task...\"/>\r\n            <button>Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ToDoForm;","import React, { useState } from 'react';\n//mock data\nimport data from \"./data.json\";\n//components\nimport Header from \"./Header\";\nimport ToDoList from \"./ToDoList\";\nimport ToDoForm from './ToDoForm';\n\nfunction App() {\n  \n  const [ toDoList, setToDoList ] = useState(data);\n\n  const handleToggle = (id) => {\n    let mapped = toDoList.map(task => {\n      return task.id === Number(id) ? { ...task, complete: !task.complete } : { ...task};\n    });\n    setToDoList(mapped);\n  }\n\n  const handleFilter = () => {\n    let filtered = toDoList.filter(task => {\n      return !task.complete;\n    });\n    setToDoList(filtered);\n  }\n\n  const addTask = (userInput ) => {\n    let copy = [...toDoList];\n    copy = [...copy, { id: toDoList.length + 1, task: userInput, complete: false }];\n    setToDoList(copy);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <ToDoList toDoList={toDoList} handleToggle={handleToggle} handleFilter={handleFilter}/>\n      <ToDoForm addTask={addTask}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}